services:
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
      RABBITMQ_DEFAULT_VHOST: /
    networks:
      - union_network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "node_health_check"]
      interval: 10s
      timeout: 5s
      retries: 5

  profiles_app:
    build:
      context: .
      dockerfile: docker/dev/profiles_app/Dockerfile
    environment:
      - PYTHONPATH=/opt:/opt/profiles_app
    volumes:
      - ./profiles_app/:/opt/profiles_app/ # для тестрирования и разработки
      - postgres_socket:/postgres_socket
      - redis_socket:/redis_socket
      - ./tmp/logs/profiles_app/:/var/log/profiles_app/
    ports:
      - "8040:40"
    env_file:
      - docker/dev/env/.conn.env
      - docker/dev/env/.env
      - docker/dev/env/.gunicorn.env
      - docker/dev/env/.smtp.env
      - docker/dev/env/.profiles.env
    depends_on:
      profiles_db:
        condition: service_healthy
        restart: true
      redis:
        condition: service_started
    restart: unless-stopped
    networks:
      - union_network

  profiles_db:
    image: postgres:15.1-alpine
    restart: unless-stopped
    volumes:
      - ./docker/dev/db/pg.conf:/etc/postgresql/postgresql.conf
      - profiles_data:/var/lib/postgresql/data/
      - postgres_socket:/var/run/postgresql/
    env_file:
      - docker/dev/env/.profiles.env
    networks:
      - union_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # для разделения моделей users(django) и моделей profile_app
  # и исключения проблем с перекрестной миграцией
  profiles_admin_db:
    image: postgres:15.1-alpine
    restart: unless-stopped
    volumes:
      - ./docker/dev/db/pg_admin.conf:/etc/postgresql/postgresql.conf
      - profiles_admin_data:/var/lib/postgresql/data/
      - postgres_admin_socket:/var/run/postgresql/
    env_file:
      - docker/dev/env/.conn.env
    networks:
      - union_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 5

  profiles_admin: # поправить url's for swagger and profiles_admin, админка работает
    build:
      context: .
      dockerfile: docker/dev/profiles_admin/Dockerfile
    ports:
      - "8000:80"
    volumes:
      - ./profiles_admin/:/opt/profiles_admin/
      - postgres_socket:/postgres_socket
      - postgres_admin_socket:/postgres_admin_socket
      - media:/opt/profiles_admin/media/
      - static:/opt/profiles_admin/static/
    depends_on:
      profiles_db:
        condition: service_healthy
    expose:
      - 8000
    env_file:
      - docker/dev/env/.conn.env
      - docker/dev/env/.env
      - docker/dev/env/.gunicorn.env
    restart: unless-stopped
    networks:
      - union_network

  redis:
    image: redis:7.4.0-alpine
    restart: always
    command: ["/var/lib/redis/redis.conf"]
    volumes:
      - ./docker/dev/redis/redis.conf:/var/lib/redis/redis.conf
      - redis_data:/data
      - redis_socket:/redis_socket
    networks:
      - union_network

volumes:
  media:
  static:
  redis_data:
  redis_socket:
  profiles_data:
  postgres_socket:
  profiles_admin_data:
  postgres_admin_socket:

networks:
  union_network:
    driver: bridge